const fs = require('fs');
const path = require('path');

class ExperimentMerger {
    constructor(configPath = './merge.config.js') {
        if (!fs.existsSync(configPath)) {
            throw new Error(`Config file not found: ${configPath}`);
        }
        this.config = require(path.resolve(configPath));
        this.templates = {};
        this.styles = [];
        this.libraries = [];
        this.scripts = [];
    }
    
    // Utility for safe escaping for double quoted strings
    escapeForDoubleQuotes(content) {
        return content
            .replace(/\\/g, '\\\\')      
            .replace(/"/g, '\\"')       
            .replace(/\r?\n/g, '\\n')    
            .replace(/\r/g, '\\n')       
            .replace(/\t/g, '\\t');     
    }
    
  
    loadFiles() {
        const { files } = this.config;
        
        // Load libraries
        if (files.libraries) {
            files.libraries.forEach(filepath => {
                if (fs.existsSync(filepath)) {
                    this.libraries.push(fs.readFileSync(filepath, 'utf8'));
                    console.log(`✓ Loaded library: ${filepath}`);
                } else {
                    console.warn(`⚠ Library not found: ${filepath}`);
                }
            });
        }
        
        // Load styles
        if (files.styles) {
            files.styles.forEach(filepath => {
                if (fs.existsSync(filepath)) {
                    const css = this.escapeForDoubleQuotes(
                        fs.readFileSync(filepath, 'utf8')
                    );
                    this.styles.push(css);
                    console.log(`Loaded styles: ${filepath}`);
                } else {
                    console.warn(` Styles not found: ${filepath}`);
                }
            });
        }
        
        // Load templates
        if (files.templates) {
            Object.entries(files.templates).forEach(([name, filepath]) => {
                if (fs.existsSync(filepath)) {
                    this.templates[name] = this.escapeForDoubleQuotes(
                        fs.readFileSync(filepath, 'utf8')
                    );
                    console.log(` Loaded template '${name}': ${filepath}`);
                } else {
                    console.warn(` Template not found: ${filepath}`);
                }
            });
        }
        
        // Load scripts
        if (files.scripts) {
            files.scripts.forEach(filepath => {
                if (fs.existsSync(filepath)) {
                    this.scripts.push(fs.readFileSync(filepath, 'utf8'));
                    console.log(`✓ Loaded script: ${filepath}`);
                } else {
                    console.warn(`⚠ Script not found: ${filepath}`);
                }
            });
        }
    }
    
    // Generate output using regular strings (no template literals)
    generateOutput() {
        const templateEntries = Object.entries(this.templates)
            .map(([name, content]) => `        "${name}": "${content}"`)
            .join(',\n');
            
        const combinedCSS = this.styles.join('\\n');
        const combinedLibraries = this.libraries.join('\n\n');
        const combinedScripts = this.scripts.join('\n\n');
        
        const timestamp = this.config.addTimestamp 
            ? `// Generated: ${new Date().toISOString()}\n` 
            : '';
        
        let output = '';
        
        // Add timestamp and header
        output += timestamp;
        output += `// ${this.config.name} - Auto-generated by merge.js\n`;
        
        output += combinedLibraries + '\n\n';
        
        // Start IIFE
        output += '(function(){\n';
        output += '    "use strict";\n\n';
        
        // Add CSS injection if styles exist
        if (combinedCSS) {
            output += '    // Inject CSS\n';
            output += '    var style = document.createElement("style");\n';
            output += '    style.textContent = "' + combinedCSS + '";\n';
            output += '    document.head.appendChild(style);\n\n';
        }
        
        // Add templates object if templates exist
        if (templateEntries) {
            output += '    // Templates object\n';
            output += '    var templates = {\n';
            output += templateEntries + '\n';
            output += '    };\n\n';
        } else {
            output += '    var templates = {};\n\n';
        }
        
        // Add main scripts
        output += '    // Main experiment logic\n';
        output += '    ' + combinedScripts.replace(/\n/g, '\n    ') + '\n\n';
        
        // Close IIFE
        output += '})();';
        
        return output;
    }
    
    // Build the experiment
    build() {
        try {
            console.log(` Building ${this.config.name}...`);
            
            this.loadFiles();
            const output = this.generateOutput();
            
            // Ensure output directory exists
            const outputDir = path.dirname(this.config.output);
            if (!fs.existsSync(outputDir)) {
                fs.mkdirSync(outputDir, { recursive: true });
                console.log(`Created directory: ${outputDir}`);
            }
            
            // Write output
            fs.writeFileSync(this.config.output, output, 'utf8');
            
            console.log(`Built successfully: ${this.config.output}`);
            console.log(`File size: ${Math.round(output.length / 1024)} KB`);
            console.log(`Includes: ${this.libraries.length} libraries, ${this.styles.length} stylesheets, ${Object.keys(this.templates).length} templates, ${this.scripts.length} scripts`);
            
            return { success: true, output: this.config.output, size: output.length };
        } catch (err) {
            console.error('Build failed:', err.message);
            return { success: false, error: err.message };
        }
    }
}

if (require.main === module) {
    const configPath = process.argv[2] || './merge.config.js';
    const merger = new ExperimentMerger(configPath);
    merger.build();
}

module.exports = ExperimentMerger;

//RAM RAM JI